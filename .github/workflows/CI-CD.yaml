name: Deploy HashiCorp Vault to Minikube (CI/CD Pipeline)

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:


  monitoring:
    runs-on: self-hosted
    #needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Prometheus
        run: |
          echo "Installing Prometheus..."
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace -f ./helm/monitoring/prometheus-values.yaml

      - name: Install Grafana
        run: |
          echo "Installing Grafana..."
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana --namespace monitoring -f ./helm/monitoring/grafana-values.yaml

      - name: Verify Monitoring Setup
        run: |
          echo "Verifying Prometheus and Grafana setup..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus,app.kubernetes.io/component=server -n monitoring --timeout=120s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=120s
          kubectl port-forward svc/prometheus-server -n monitoring 9090:9090 &
          kubectl port-forward svc/grafana -n monitoring 3000:3000 &
          sleep 30
          curl -s http://localhost:9090/targets | grep "vault"
          curl -s http://localhost:3000 | grep "Grafana"
        continue-on-error: true

    
  cleanup:
    runs-on: self-hosted
    needs: monitoring
    env:
        JFROG_REGISTRY: "triald4lybb.jfrog.io"
        JFROG_REPO: "vault-repo"
        IMAGE_NAME: "vault-server"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
    
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up resources..."
          kubectl delete namespace monitoring --ignore-not-found    

      - name: Delete Older Docker Images from JFrog
        run: |
          echo "Deleting older images from JFrog..."
          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
            -X DELETE "https://${{ env.JFROG_REGISTRY }}/artifactory/api/docker/${{ env.JFROG_REPO }}/v2/${{ env.IMAGE_NAME }}/tags?olderThan=3d"



  notify:
    runs-on: self-hosted
    needs: monitoring # [validate, build, push, vulnerability_check, deploy, monitoring, cleanup]
    steps:
      - name: Send Slack Notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment succeeded for run #${{ github.run_number }} on branch ${{ github.ref_name }}."}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment failed for run #${{ github.run_number }} on branch ${{ github.ref_name }}. Please check the logs for more details."}' ${{ secrets.SLACK_WEBHOOK_URL }}